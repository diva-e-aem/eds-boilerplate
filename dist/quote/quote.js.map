{"version":3,"file":"quote.js","sources":["../../src/helpers/renderBlock.ts","../../src/blocks/quote/quote.ts"],"sourcesContent":["import { render, RenderOptions, TemplateResult } from 'lit';\nimport { DebuggerService } from '@kluntje/services';\n\nimport { cleanUpBlock } from 'Utils/cleanUpBlock';\n\nimport { moveInstrumentation } from './moveInstrumentation';\n\ninterface MoveInstrumentationsOption {\n  from: Element | string;\n  to: Element | string;\n}\n\ninterface RenderBlockOptions {\n  template: TemplateResult;\n  container: HTMLElement;\n  cleanUp?: boolean;\n  litRenderOptions?: RenderOptions;\n  moveInstrumentationsOptions?: MoveInstrumentationsOption | MoveInstrumentationsOption[];\n}\n\n/**\n * Renders a lit-html template into a container, optionally cleaning up the container\n * and moving instrumentation attributes.\n *\n * @param {RenderBlockOptions} options - The options for rendering the block.\n * @param {TemplateResult} options.template - The lit-html template to render.\n * @param {HTMLElement} options.container - The container element to render the template into.\n * @param {boolean} [options.cleanUp=true] - Whether to clean up the container before rendering. default: true.\n * @param {RenderOptions} [options.litRenderOptions] - Additional options for the lit-html render function.\n * @param {MoveInstrumentationsOption | MoveInstrumentationsOption[]} [options.moveInstrumentationsOptions] -\n *        Options for moving instrumentation attributes. Can be a single option or an array of options.\n *\n * @example\n * // Basic usage:\n * renderBlock({\n *   template: html`<div>Hello, world!</div>`,\n *   container: document.getElementById('app')\n * });\n *\n * @example\n * // With instrumentation attribute moving:\n * renderBlock({\n *   template: html`<div id=\"target\"></div>`,\n *   container: document.getElementById('app'),\n *   moveInstrumentationsOptions: {\n *     from: '#source',\n *     to: '#target'\n *   }\n * });\n *\n * @example\n * // With multiple instrumentation attribute moves:\n * renderBlock({\n *   template: html`<div id=\"target1\"></div><div id=\"target2\"></div>`,\n *   container: document.getElementById('app'),\n *   moveInstrumentationsOptions: [\n *     { from: '#source1', to: '#target1' },\n *     { from: '#source2', to: '#target2' }\n *   ]\n * });\n *\n * @example\n * // With from or to as elements:\n * renderBlock({\n *   template: html`<div id=\"target1\"></div><div id=\"target2\"></div>`,\n *   container: document.getElementById('app'),\n *   moveInstrumentationsOptions: [\n *     { from: document.getElementById('source1'), to: '#target1' },\n *     { from: '#source2', to: document.getElementById('target2') }\n *   ]\n * });\n *\n *\n * @example\n * // With clean up disabled:\n * renderBlock({\n *   template: html`<div>Hello, world!</div>`,\n *   container: document.getElementById('app'),\n *   cleanUp: false\n * });\n *\n *\n * @returns {void}\n */\nexport const renderBlock = (options: RenderBlockOptions) => {\n  const { template, container, cleanUp = true, litRenderOptions, moveInstrumentationsOptions } = options;\n\n  if (cleanUp) {\n    cleanUpBlock(container);\n  }\n\n  render(template, container, litRenderOptions);\n\n  if (moveInstrumentationsOptions) {\n    const moveOptions = Array.isArray(moveInstrumentationsOptions)\n      ? moveInstrumentationsOptions\n      : [moveInstrumentationsOptions];\n    moveOptions.forEach(({ from, to }) => {\n      try {\n        moveInstrumentation(from, to);\n      } catch (error) {\n        DebuggerService.error('Error moving instrumentation attributes:', error);\n      }\n    });\n  }\n};\n","import { html } from 'lit';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\n\nimport './quote.scss';\nimport { renderBlock } from 'Helpers/renderBlock';\n\nconst template = ({ quote, author }: { quote: string; author: string }) => {\n  return html`\n    <blockquote class=\"quote__content\">${unsafeHTML(quote)}</blockquote>\n    <p class=\"quote__author\">${author}</p>\n  `;\n};\n\nexport default function decorate(block: HTMLElement) {\n  const quote = block.children[0].children[0].children[0] as HTMLDivElement;\n  const author = block.children[1].children[0].children[0] as HTMLParagraphElement;\n\n  renderBlock({\n    template: template({ quote: quote.innerHTML, author: author.innerText }),\n    container: block,\n    moveInstrumentationsOptions: [\n      { from: quote, to: '.quote__content' },\n      { from: author, to: '.quote__author' },\n    ],\n  });\n}\n"],"names":["renderBlock","options","template","container","cleanUp","litRenderOptions","moveInstrumentationsOptions","cleanUpBlock","render","from","to","moveInstrumentation","error","DebuggerService","quote","author","html","unsafeHTML","decorate","block"],"mappings":"mTAoFa,MAAAA,EAAeC,GAAgC,CAC1D,KAAM,CAAE,SAAAC,EAAU,UAAAC,EAAW,QAAAC,EAAU,GAAM,iBAAAC,EAAkB,4BAAAC,CAAgC,EAAAL,EAE3FG,GACFG,EAAaJ,CAAS,EAGjBK,EAAAN,EAAUC,EAAWE,CAAgB,EAExCC,IACkB,MAAM,QAAQA,CAA2B,EACzDA,EACA,CAACA,CAA2B,GACpB,QAAQ,CAAC,CAAE,KAAAG,EAAM,GAAAC,KAAS,CAChC,GAAA,CACFC,EAAoBF,EAAMC,CAAE,QACrBE,EAAO,CACEC,EAAA,MAAM,2CAA4CD,CAAK,CACzE,CAAA,CACD,CAEL,ECnGMV,EAAW,CAAC,CAAE,MAAAY,EAAO,OAAAC,KAClBC,uCACgCC,EAAWH,CAAK,CAAC,yCAC3BC,CAAM,OAIrC,SAAwBG,EAASC,EAAoB,CAC7C,MAAAL,EAAQK,EAAM,SAAS,CAAC,EAAE,SAAS,CAAC,EAAE,SAAS,CAAC,EAChDJ,EAASI,EAAM,SAAS,CAAC,EAAE,SAAS,CAAC,EAAE,SAAS,CAAC,EAE3CnB,EAAA,CACV,SAAUE,EAAS,CAAE,MAAOY,EAAM,UAAW,OAAQC,EAAO,UAAW,EACvE,UAAWI,EACX,4BAA6B,CAC3B,CAAE,KAAML,EAAO,GAAI,iBAAkB,EACrC,CAAE,KAAMC,EAAQ,GAAI,gBAAiB,CACvC,CAAA,CACD,CACH"}