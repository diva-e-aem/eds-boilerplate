{"version":3,"file":"moveInstrumentation.CJwB2sIU.js","sources":["../../src/helpers/moveAttributes.ts","../../src/helpers/moveInstrumentation.ts"],"sourcesContent":["/**\n * Moves all the attributes from a given elmenet to another given element.\n * @param {Element} from the element to copy attributes from\n * @param {Element} to the element to copy attributes to\n * @param {string[]} attributes the attributes to be moved\n */\nexport function moveAttributes(from: Element, to: Element, attributes: string[]) {\n  if (!attributes) {\n    // eslint-disable-next-line no-param-reassign\n    attributes = [...from.attributes].map(({ nodeName }) => nodeName);\n  }\n  attributes.forEach((attr) => {\n    const value = from.getAttribute(attr);\n    if (value) {\n      to.setAttribute(attr, value);\n      from.removeAttribute(attr);\n    }\n  });\n}\n","import { DebuggerService } from '@kluntje/services';\n\nimport { moveAttributes } from './moveAttributes';\n\n/**\n * Move instrumentation attributes that starts with \"data-aue-\" or \"data-richtext-\"  from a given element to another given element.\n * @param {Element | string} from the element or CSS selctor to copy attributes from\n * @param {Element | string} to the element or CSS selector to copy attributes to\n * @returns {void}\n * @example\n * // With CSS selectors as arguments:\n * moveInstrumentation('.quote', '.quote__content');\n *\n * // Or with elements as arguments:\n * moveInstrumentation(document.querySelector('.quote'), document.querySelector('.quote__content'));\n *\n * // Or with a mix of CSS selector and element as arguments:\n * moveInstrumentation('.quote', document.querySelector('.quote__content'));\n *\n * // Example HTML:\n * // <blockquote class=\"quote\" data-aue-attribute=\"value\">Quote</blockquote>\n * // <div class=\"quote__content\"></div>\n *\n * // Usage:\n * moveInstrumentation('.quote', '.quote__content');\n *\n * // Result:\n * // <blockquote class=\"quote\">Quote</blockquote>\n * // <div class=\"quote__content\" data-aue-attribute=\"value\"></div>\n */\nexport function moveInstrumentation(from: Element | string, to: Element | string): void {\n  try {\n    const isFromElString = typeof from === 'string';\n    const isToElString = typeof to === 'string';\n    const fromEl = isFromElString ? document.querySelector(from) : from;\n    const toEl = isToElString ? document.querySelector(to) : to;\n\n    if (!fromEl || !toEl) {\n      throw new Error(\n        `Invalid elements or selectors provided: from=${isFromElString ? from : from.tagName}, to=${isToElString ? to : to.tagName}`\n      );\n    }\n\n    const attributesToMove = [...fromEl.attributes]\n      .map(({ nodeName }) => nodeName)\n      .filter((attr) => attr.startsWith('data-aue-') || attr.startsWith('data-richtext-'));\n\n    moveAttributes(fromEl, toEl, attributesToMove);\n  } catch (error) {\n    DebuggerService.error('Error moving instrumentation attributes:', error);\n  }\n}\n"],"names":["moveAttributes","from","to","attributes","nodeName","attr","value","moveInstrumentation","isFromElString","isToElString","fromEl","toEl","attributesToMove","error","DebuggerService"],"mappings":"+CAMgB,SAAAA,EAAeC,EAAeC,EAAaC,EAAsB,CAC1EA,IAEUA,EAAA,CAAC,GAAGF,EAAK,UAAU,EAAE,IAAI,CAAC,CAAE,SAAAG,KAAeA,CAAQ,GAEvDD,EAAA,QAASE,GAAS,CACrB,MAAAC,EAAQL,EAAK,aAAaI,CAAI,EAChCC,IACCJ,EAAA,aAAaG,EAAMC,CAAK,EAC3BL,EAAK,gBAAgBI,CAAI,EAC3B,CACD,CACH,CCYgB,SAAAE,EAAoBN,EAAwBC,EAA4B,CAClF,GAAA,CACI,MAAAM,EAAiB,OAAOP,GAAS,SACjCQ,EAAe,OAAOP,GAAO,SAC7BQ,EAASF,EAAiB,SAAS,cAAcP,CAAI,EAAIA,EACzDU,EAAOF,EAAe,SAAS,cAAcP,CAAE,EAAIA,EAErD,GAAA,CAACQ,GAAU,CAACC,EACd,MAAM,IAAI,MACR,gDAAgDH,EAAiBP,EAAOA,EAAK,OAAO,QAAQQ,EAAeP,EAAKA,EAAG,OAAO,EAAA,EAIxH,MAAAU,EAAmB,CAAC,GAAGF,EAAO,UAAU,EAC3C,IAAI,CAAC,CAAE,SAAAN,CAAS,IAAMA,CAAQ,EAC9B,OAAQC,GAASA,EAAK,WAAW,WAAW,GAAKA,EAAK,WAAW,gBAAgB,CAAC,EAEtEL,EAAAU,EAAQC,EAAMC,CAAgB,QACtCC,EAAO,CACEC,EAAA,MAAM,2CAA4CD,CAAK,CACzE,CACF"}