{"version":3,"file":"getMetadata.C2EoXxjz.js","sources":["../../src/utils/getMetadata.ts"],"sourcesContent":["/**\n * Retrieves the content of a specified metadata tag from the document head.\n *\n * @param {string} value - The name or property attribute value of the metadata tag.\n * @param {Document} [doc=document] - The document to search for the metadata tag (default is the current document).\n * @returns {string} - The content of the metadata tag, if found; otherwise, an empty string.\n *\n * @example\n * Example 1:\n * Assuming <meta name=\"description\" content=\"This is a sample description.\"> exists in the document head.\n * const metaContent = getMetadata('description');\n * console.log(metaContent);\n * Output: 'This is a sample description.'\n *\n * @example\n * Example 2:\n * Assuming <meta property=\"og:title\" content=\"Open Graph Title\"> exists in the document head.\n * const metaContent = getMetadata('og:title', document);\n * console.log(metaContent);\n * Output: 'Open Graph Title'\n */\nexport function getMetadata(value: string, doc: Document = document): string {\n  const attr: 'property' | 'name' = value && value.includes(':') ? 'property' : 'name';\n  const metaTags: HTMLMetaElement[] =\n    ([...doc.head.querySelectorAll(`meta[${attr}=\"${value}\"]`)] as HTMLMetaElement[]) || [];\n  const meta: string = metaTags.map((metaElement: HTMLMetaElement) => metaElement.content).join(', ');\n  return meta.length ? meta : '';\n}\n"],"names":["getMetadata","value","doc","attr","meta","metaElement"],"mappings":"AAqBgB,SAAAA,EAAYC,EAAeC,EAAgB,SAAkB,CAC3E,MAAMC,EAA4BF,GAASA,EAAM,SAAS,GAAG,EAAI,WAAa,OAGxEG,EADH,CAAC,GAAGF,EAAI,KAAK,iBAAiB,QAAQC,CAAI,KAAKF,CAAK,IAAI,CAAC,EAC9B,IAAKI,GAAiCA,EAAY,OAAO,EAAE,KAAK,IAAI,EAC3F,OAAAD,EAAK,OAASA,EAAO,EAC9B"}