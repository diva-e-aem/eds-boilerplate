{"version":3,"mappings":"iNAWA,MAAMA,EAAiB,SAEd,OAAO,+iBAAc,EAAE,IAAKC,IAAc,CAC/C,KAAMA,EAAS,QAAQ,mBAAoB,IAAI,EAC/C,KAAMA,CACN,IAIEC,EAAc,MAAOD,GAAsC,CAC3D,IACI,MAAAE,EAAW,MAAM,MAAMF,CAAQ,EACrC,GAAIE,EAAS,GACJ,aAAMA,EAAS,aAEjBC,EAAO,CACd,QAAQ,MAAM,uBAAuBH,CAAQ,GAAIG,CAAK,CACxD,CACO,QACT,EAEA,eAAsBC,EAASC,EAAuC,CAoB7DC,EAAA,MAnBoB,SAAY,CAC/B,MAAAC,EAAY,MAAMR,IAClBS,EAAe,MAAM,QAAQ,IACjCD,EAAU,IAAI,MAAO,CAAE,KAAAE,EAAM,KAAAC,KAAW,CAChC,MAAAC,EAAU,MAAMV,EAAYS,CAAI,EAC/B,OAAAE,sDAEwBH,CAAI,KAC3BI,EAAWF,CAAO,CAAC,UACbF,CAAI,sBAInB,GAGH,OAAOG,+CAAmDJ,CAAY,aAGrCH,CAAS,EAElCA,EAAA,cACR,IAAI,YAAYS,EAAc,MAAO,CACnC,OAAQ,CAAE,QAAS,8BAA+B,EACnD,EAEL,CAEA,MAAeC,EAAA,CACb,MAAO,OACT","names":["fetchIconNames","iconPath","loadSVGIcon","response","error","decorate","container","render","iconNames","dynamicIcons","name","path","svgIcon","html","unsafeHTML","PLUGIN_EVENTS","icons"],"ignoreList":[],"sources":["../../tools/sidekick/plugins/icons/icons.ts"],"sourcesContent":["import { html, render } from 'lit';\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html.js';\n// @ts-ignore import module\nimport { PLUGIN_EVENTS } from 'https://main--franklin-library-host--dylandepass.hlx.live/tools/sidekick/library/events/events.js';\nimport './icons.scss';\n\ninterface ImportMeta {\n  glob: (pattern: string) => Record<string, () => Promise<unknown>>;\n}\n\n\nconst fetchIconNames = async (): Promise<{ name: string; path: string }[]> => {\n  const iconFiles = import.meta.glob('/public/icons/*.svg');\n  return Object.keys(iconFiles).map((iconPath) => ({\n    name: iconPath.replace(/^.*\\/(.*?)\\.svg$/, '$1'),\n    path: iconPath,\n  }));\n};\n\n\nconst loadSVGIcon = async (iconPath: string): Promise<string> => {\n  try {\n    const response = await fetch(iconPath);\n    if (response.ok) {\n      return await response.text();\n    }\n  } catch (error) {\n    console.error(`Error loading icon: ${iconPath}`, error);\n  }\n  return '';\n};\n\nexport async function decorate(container: HTMLElement): Promise<void> {\n  const renderDynamicIcons = async () => {\n    const iconNames = await fetchIconNames();\n    const dynamicIcons = await Promise.all(\n      iconNames.map(async ({ name, path }) => {\n        const svgIcon = await loadSVGIcon(path);\n        return html`\n          <div class=\"icons_title\">\n            <div class=\"icon\" title=\"${name}\">\n              ${unsafeHTML(svgIcon)}\n              <span>${name}</span>\n            </div>\n          </div>\n        `;\n      })\n    );\n\n    return html` <div class=\"icons-container dynamic-icons\">${dynamicIcons}</div> `;\n  };\n\n  render(await renderDynamicIcons(), container);\n\n  container.dispatchEvent(\n    new CustomEvent(PLUGIN_EVENTS.TOAST, {\n      detail: { message: 'Icons rendered successfully!' },\n    })\n  );\n}\n\nexport default {\n  title: 'Icons',\n};\n"],"file":"icons/icons.js"}