{"version":3,"file":"main.js","sources":["../../src/utils/addClasses.ts","../../src/app/tasks/decorateTemplateAndTheme.ts","../../src/utils/undefinedOnEmpty.ts","../../src/app/tasks/setDocLanguage.ts","../../src/helpers/sidekick/getLocation.ts","../../config.ts","../../src/app/tasks/loadFonts.ts","../../src/app/tasks/sampleRUM.ts","../../src/app/tasks/setupHlxObj.ts","../../src/app/tasks/initSampleRUM.ts","../../src/app/tasks/waitForLCP.ts","../../src/app/index.ts","../../src/app/init.ts","../../src/main.ts"],"sourcesContent":["import { toClassName } from 'Utils/toClassName';\n\n/**\n * Adds CSS classes to an HTML element.\n *\n * @param {HTMLElement} element - The HTML element to which classes will be added.\n * @param {string} classes - A string containing CSS classes separated by commas.\n *\n * @example\n * const element = document.getElementById('myElement');\n * const classesToAdd = 'class1, class2, class3';\n * addClasses(element, classesToAdd);\n */\nexport const addClasses = (element: HTMLElement, classes: string): void => {\n  classes.split(',').forEach((cssClass: string): void => {\n    element.classList.add(toClassName(cssClass.trim()));\n  });\n};\n","import { addClasses } from '../../utils/addClasses';\nimport { getMetadata } from '../../utils/getMetadata';\n\n/**\n * Decorates the template and theme by adding classes to the body.\n * The classes are defined in the meta tags of the document.\n * Usefull for styling the page based on the template and theme meta tags\n * that can be set in the metadata table in EDS.\n * @example\n * <meta name=\"template\" content=\"template-name\">\n * <meta name=\"theme\" content=\"theme-name\">\n * @example\n * <body class=\"template-name theme-name\">\n */\nexport function decorateTemplateAndTheme() {\n  const template = getMetadata('template');\n  if (template) addClasses(document.body, template);\n  const theme = getMetadata('theme');\n  if (theme) addClasses(document.body, theme);\n}\n","/**\n * Returns undefined if the value is an empty string, otherwise returns the value itself.\n *\n * @param {string} value - The value to check.\n * @returns {string | undefined} - If the value is an empty string, returns undefined\n * otherwise, returns the value itself.\n *\n * @example\n * // Example usage:\n * const emptyValue = '';\n * const nonEmptyValue = 'Hello, World!';\n *\n * const result1 = undefinedOnEmpty(emptyValue);\n * console.log(result1); // Output: undefined\n *\n * const result2 = undefinedOnEmpty(nonEmptyValue);\n * console.log(result2); // Output: 'Hello, World!'\n */\nexport function undefinedOnEmpty(value: string): string | undefined {\n  return value.trim() === '' ? undefined : value;\n}\n","import { getMetadata } from '../../utils/getMetadata';\nimport { undefinedOnEmpty } from '../../utils/undefinedOnEmpty';\n\n/*\n * This function sets the language of the document based on the language metadata.\n */\nexport function setDocLanguage() {\n  const lang = getMetadata('language');\n  document.documentElement.lang = undefinedOnEmpty(lang) || 'en';\n}\n","import { isSidekickLibraryActive } from './isSidekickLibraryActive';\n\n/**\n * Returns the true origin of the current page in the browser.\n * If the page is running in an iframe with srcdoc, the query param is returned.\n * @returns {String} The query param of the current page or the query param of the block running in the library\n *\n * @example\n * const searchParams = new URLSearchParams(getLocation().search);\n *\n * @remarks\n * Needs to be used when the Sidekick Library Plugin is in use.\n */\nexport function getLocation(): Location {\n  return isSidekickLibraryActive() ? window.parent.location : window.location;\n}\n","export interface Config {\n  mainTsPath: string;\n  mainScssPath: string;\n  iconsDirPath: string;\n  iconsTypesPath: string;\n  fontsScssPath?: string;\n  fontsCssPath?: string;\n  lazyStylesScssPath?: string;\n  lazyStylesCssPath?: string;\n  sidekickLibraryStylesScssPath?: string;\n  sidekickLibraryStylesCssPath?: string;\n  editorTsPath: string;\n  lcpBlocks?: string[];\n}\n\nexport const config: Config = {\n  mainTsPath: './src/main.ts',\n  mainScssPath: './src/styles/sass/main.scss',\n  iconsDirPath: './public/icons',\n  iconsTypesPath: './src/types/icons.types.ts',\n  fontsScssPath: './src/styles/sass/fonts.scss',\n  fontsCssPath: './dist/fonts/fonts.css',\n  lazyStylesScssPath: './src/styles/sass/lazy-styles.scss',\n  lazyStylesCssPath: './dist/lazyStyles/lazyStyles.css',\n  sidekickLibraryStylesScssPath: './src/styles/sass/sidekick-library-styles.scss',\n  sidekickLibraryStylesCssPath: './dist/sidekickLibraryStyles/sidekickLibraryStyles.css',\n  editorTsPath: './src/app/editor/editor-support.ts',\n  lcpBlocks: [],\n};\n","import { DebuggerService } from '@kluntje/services';\n\nimport { getLocation } from 'Helpers/sidekick/getLocation';\n\nimport { loadCSS } from './loadCSS';\nimport { config } from '../../../config';\n\nexport async function loadFonts(): Promise<void> {\n  const { fontsCssPath } = config;\n  if (!fontsCssPath) return;\n  await loadCSS(fontsCssPath);\n  try {\n    if (!getLocation().hostname.includes('localhost')) sessionStorage.setItem('fonts-loaded', 'true');\n  } catch (error) {\n    DebuggerService.error('loadFonts: Error setting fonts-loaded in session storage', error);\n  }\n}\n","/* eslint-disable -- Adobe code */\n/**\n * log RUM if part of the sample.\n * @param {string} checkpoint identifies the checkpoint in funnel\n * @param {Object} data additional data for RUM sample\n * @param {string} data.source DOM node that is the source of a checkpoint event,\n * identified by #id or .classname\n * @param {string} data.target subject of the checkpoint event,\n * for instance the href of a link, or a search term\n */\n\nexport function sampleRUM(checkpoint, data = {}) {\n  // @ts-ignore\n  sampleRUM.defer = sampleRUM.defer || [];\n  const defer = (fnname) => {\n    // @ts-ignore\n    sampleRUM[fnname] = sampleRUM[fnname] || ((...args) => sampleRUM.defer.push({ fnname, args }));\n  };\n  // @ts-ignore\n  sampleRUM.drain =\n    // @ts-ignore\n    sampleRUM.drain ||\n    ((dfnname, fn) => {\n      sampleRUM[dfnname] = fn;\n      // @ts-ignore\n      sampleRUM.defer\n        .filter(({ fnname }) => dfnname === fnname)\n        .forEach(({ fnname, args }) => sampleRUM[fnname](...args));\n    });\n  // @ts-ignore\n  sampleRUM.always = sampleRUM.always || [];\n  // @ts-ignore\n  sampleRUM.always.on = (chkpnt, fn) => {\n    // @ts-ignore\n    sampleRUM.always[chkpnt] = fn;\n  };\n  // @ts-ignore\n  sampleRUM.on = (chkpnt, fn) => {\n    // @ts-ignore\n    sampleRUM.cases[chkpnt] = fn;\n  };\n  defer('observe');\n  defer('cwv');\n  try {\n    window.hlx = window.hlx || {};\n    // @ts-ignore\n    if (!window.hlx.rum) {\n      const usp = new URLSearchParams(window.location.search);\n      const weight = usp.get('rum') === 'on' ? 1 : 100; // with parameter, weight is 1. Defaults to 100.\n      const id = Array.from({ length: 75 }, (_, i) => String.fromCharCode(48 + i))\n        .filter((a) => /\\d|[A-Z]/i.test(a))\n        .filter(() => Math.random() * 75 > 70)\n        .join('');\n      const random = Math.random();\n      const isSelected = random * weight < 1;\n      const firstReadTime = Date.now();\n      const urlSanitizers = {\n        full: () => window.location.href,\n        origin: () => window.location.origin,\n        path: () => window.location.href.replace(/\\?.*$/, ''),\n      };\n      // @ts-ignore\n      window.hlx.rum = {\n        weight,\n        id,\n        random,\n        isSelected,\n        firstReadTime,\n        sampleRUM,\n        sanitizeURL: urlSanitizers[window.hlx.RUM_MASK_URL || 'path'],\n      };\n    }\n    // @ts-ignore\n    const { weight, id, firstReadTime } = window.hlx.rum;\n    // @ts-ignore\n    if (window.hlx && window.hlx.rum && window.hlx.rum.isSelected) {\n      const knownProperties = [\n        'weight',\n        'id',\n        'referer',\n        'checkpoint',\n        't',\n        'source',\n        'target',\n        'cwv',\n        'CLS',\n        'FID',\n        'LCP',\n        'INP',\n      ];\n      const sendPing = (pdata = data) => {\n        const body = JSON.stringify(\n          {\n            weight,\n            id,\n            // @ts-ignore\n            referer: window.hlx.rum.sanitizeURL(),\n            checkpoint,\n            t: Date.now() - firstReadTime,\n            ...data,\n          },\n          knownProperties\n        );\n        const url = `https://rum.hlx.page/.rum/${weight}`;\n        navigator.sendBeacon(url, body);\n        // eslint-disable-next-line no-console\n        console.debug(`ping:${checkpoint}`, pdata);\n      };\n      // @ts-ignore\n      sampleRUM.cases = sampleRUM.cases || {\n        // @ts-ignore\n        cwv: () => sampleRUM.cwv(data) || true,\n        lazy: () => {\n          // use classic script to avoid CORS issues\n          const script = document.createElement('script');\n          script.src = 'https://rum.hlx.page/.rum/@adobe/helix-rum-enhancer@^1/src/index.js';\n          document.head.appendChild(script);\n          return true;\n        },\n      };\n      sendPing(data);\n      // @ts-ignore\n      if (sampleRUM.cases[checkpoint]) {\n        // @ts-ignore\n        sampleRUM.cases[checkpoint]();\n      }\n    }\n    // @ts-ignore\n    if (sampleRUM.always[checkpoint]) {\n      // @ts-ignore\n      sampleRUM.always[checkpoint](data);\n    }\n  } catch (error) {\n    // something went wrong\n  }\n}\n","import { DebuggerService } from '@kluntje/services';\n\nexport default function setupHlxObj(mainScriptPath = '/dist/main/main.js') {\n  window.hlx = window.hlx || {};\n  window.hlx.RUM_MASK_URL = 'full';\n  window.hlx.codeBasePath = '';\n  window.hlx.lighthouse = new URLSearchParams(window.location.search).get('lighthouse') === 'on';\n\n  const scriptEl = document.querySelector(`script[src$=\"${mainScriptPath}\"]`) as HTMLScriptElement;\n  if (scriptEl) {\n    try {\n      [window.hlx.codeBasePath] = new URL(scriptEl.src).pathname.split(mainScriptPath);\n    } catch (error) {\n      DebuggerService.log('setupHlxObj: Could not set codeBasePath.', error);\n    }\n  }\n}\n","import { sampleRUM } from './sampleRUM';\nimport setupHlxObj from './setupHlxObj';\n\nexport function initSampleRUM() {\n  setupHlxObj();\n  sampleRUM('top');\n\n  window.addEventListener('load', () => sampleRUM('load'));\n\n  window.addEventListener('unhandledrejection', (event) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- this is Adobe code\n    sampleRUM('error', { source: event.reason.sourceURL, target: event.reason.line });\n  });\n\n  window.addEventListener('error', (event) => {\n    sampleRUM('error', { source: event.filename, target: event.lineno });\n  });\n}\n","import { collectBlocks } from './collectBlocks';\nimport { loadBlockModules } from './loadBlockModules';\nimport { loadBlockStyles } from './loadBlockStyles';\nimport { config } from '../../../config';\nimport { showSection } from './showSection';\n\n/**\n * Wait for the Largest Contentful Paint (LCP) candidate to be loaded.\n * This function will load the modules and styles for the first section after the LCP candidate.\n * @returns {Promise<Event | void>}\n */\nexport async function waitForLCP(): Promise<Event | void> {\n  const firstSection: HTMLElement | null = document.querySelector('.section');\n  const lcpCandidate = document.querySelector<HTMLImageElement>('main img');\n  const { lcpBlocks } = config;\n\n  if (firstSection) {\n    const blocks = collectBlocks(firstSection);\n    const blockPromises: Promise<void>[] = [];\n\n    for (const block of blocks) {\n      if (lcpBlocks?.includes(block.name)) {\n        blockPromises.push(loadBlockModules(block), loadBlockStyles(block));\n      }\n      if (blockPromises.length < 1 && blocks.length > 0) {\n        const firstBlock = blocks[0];\n        blockPromises.push(loadBlockModules(firstBlock), loadBlockStyles(firstBlock));\n      }\n    }\n\n    await Promise.all(blockPromises);\n    showSection(firstSection);\n  }\n\n  // @ts-ignore\n  if (document.body.style.display === 'none') {\n    // @ts-ignore\n    document.body.style.display = null;\n  }\n\n  await new Promise<Event | void>((resolve) => {\n    if (lcpCandidate && !lcpCandidate.complete) {\n      lcpCandidate.setAttribute('loading', 'eager');\n      lcpCandidate.setAttribute('fetchpriority', 'high');\n      lcpCandidate.addEventListener('load', (ev: Event) => resolve(ev));\n      lcpCandidate.addEventListener('error', (ev: Event) => resolve(ev));\n    } else {\n      resolve();\n    }\n  });\n}\n","import { DebuggerService } from '@kluntje/services';\n\nimport { isSidekickLibraryActive } from 'Helpers/sidekick/isSidekickLibraryActive';\n\nimport { decorateTemplateAndTheme } from './tasks/decorateTemplateAndTheme';\nimport { decorateButtons } from './tasks/decorateButtons';\nimport { setDocLanguage } from './tasks/setDocLanguage';\nimport { loadFonts } from './tasks/loadFonts';\nimport { initSampleRUM } from './tasks/initSampleRUM';\nimport { loadCSS } from './tasks/loadCSS';\nimport { config } from '../../config';\nimport { loadBlocks } from './tasks/loadBlocks';\nimport { transformSections } from './tasks/transformSections';\nimport { decorateBlocks } from './tasks/decorateBlocks';\nimport { sampleRUM } from './tasks/sampleRUM';\nimport { waitForLCP } from './tasks/waitForLCP';\n\nclass HLX {\n  private beforeEagerCallbacks: Array<() => Promise<void>> = [];\n  private loadEagerCallbacks: Array<() => Promise<void>> = [];\n  private beforeLoadLazyCallbacks: Array<() => Promise<void>> = [];\n  private loadLazyCallbacks: Array<() => Promise<void>> = [];\n  private beforeLoadDelayedCallbacks: Array<() => Promise<void>> = [];\n  private loadDelayedCallbacks: Array<() => Promise<void>> = [];\n  private initializedCallbacks: Array<() => Promise<void>> = [];\n\n  private beforeEagerPromise?: Promise<void>;\n  private eagerPromise?: Promise<void>;\n  private beforeLazyPromise?: Promise<void>;\n  private lazyPromise?: Promise<void>;\n  private beforeDelayedPromise?: Promise<void>;\n  private delayedPromise?: Promise<void>;\n  private initializedPromise?: Promise<void>;\n\n  private get beforeEager() {\n    if (this.beforeEagerPromise === undefined) {\n      this.beforeEagerPromise = this.beforeLoadEager();\n    }\n    return this.beforeEagerPromise;\n  }\n\n  private get loadEager() {\n    if (this.eagerPromise === undefined) {\n      this.eagerPromise = this.loadEagerPromise();\n    }\n    return this.eagerPromise;\n  }\n\n  private get beforeLoadLazy() {\n    if (this.beforeLazyPromise === undefined) {\n      this.beforeLazyPromise = this.beforeLoadLazyPromise();\n    }\n    return this.beforeLazyPromise;\n  }\n\n  private get loadLazy() {\n    if (this.lazyPromise === undefined) {\n      this.lazyPromise = this.loadLazyPromise();\n    }\n    return this.lazyPromise;\n  }\n\n  private get beforeLoadDelayed() {\n    if (this.beforeDelayedPromise === undefined) {\n      this.beforeDelayedPromise = this.beforeLoadDelayedPromise();\n    }\n    return this.beforeDelayedPromise;\n  }\n\n  private get loadDelayed() {\n    if (this.delayedPromise === undefined) {\n      this.delayedPromise = this.loadDelayedPromise();\n    }\n    return this.delayedPromise;\n  }\n\n  private get initialized() {\n    if (this.initializedPromise === undefined) {\n      this.initializedPromise = this.getInitializedPromise();\n    }\n    return this.initializedPromise;\n  }\n\n  public addBeforeEagerTask(cb: () => Promise<void>) {\n    this.beforeEagerCallbacks.push(cb);\n  }\n\n  public addLoadEagerTask(cb: () => Promise<void>) {\n    this.loadEagerCallbacks.push(cb);\n  }\n\n  public addBeforeLoadLazyTask(cb: () => Promise<void>) {\n    this.beforeLoadLazyCallbacks.push(cb);\n  }\n\n  public addLoadLazyTask(cb: () => Promise<void>) {\n    this.loadLazyCallbacks.push(cb);\n  }\n\n  public addBeforeLoadDelayedTask(cb: () => Promise<void>) {\n    this.beforeLoadDelayedCallbacks.push(cb);\n  }\n\n  public addLoadDelayedTask(cb: () => Promise<void>) {\n    this.loadDelayedCallbacks.push(cb);\n  }\n\n  public addInitializedTask(cb: () => Promise<void>) {\n    this.initializedCallbacks.push(cb);\n  }\n\n  public async init() {\n    await this.beforeEager;\n    await this.loadEager;\n    await this.beforeLoadLazy;\n    await this.loadLazy;\n    await this.beforeLoadDelayed;\n    await this.loadDelayed;\n    await this.initialized;\n  }\n\n  private async beforeLoadEager(): Promise<void> {\n    const beforeLoadEagerTask: Promise<void> = new Promise((resolve) => {\n      initSampleRUM();\n      decorateTemplateAndTheme();\n      setDocLanguage();\n      resolve();\n    });\n\n    await Promise.all([...this.beforeEagerCallbacks.map((cb) => cb()), beforeLoadEagerTask]);\n  }\n\n  private async loadEagerPromise(): Promise<void> {\n    // eslint-disable-next-line no-async-promise-executor, @typescript-eslint/no-misused-promises\n    const loadEagerTask = new Promise<void>(async (resolve) => {\n      try {\n        const main = document.querySelector('main') as HTMLElement;\n        decorateButtons(main);\n        transformSections(main);\n        decorateBlocks(main);\n\n        document.body.classList.add('show');\n\n        /* if desktop (proxy for fast connection) or fonts already loaded, load fonts.css */\n        if (window.innerWidth >= 900 || sessionStorage.getItem('fonts-loaded')) {\n          await loadFonts();\n        }\n        resolve();\n      } catch (error) {\n        DebuggerService.error('index: could not load fonts', error);\n      }\n    });\n\n    await Promise.all([...this.loadEagerCallbacks.map((cb) => cb()), loadEagerTask, waitForLCP()]);\n  }\n\n  private async beforeLoadLazyPromise(): Promise<void> {\n    const beforeLoadLazyTask: Promise<void> = new Promise((resolve) => resolve());\n\n    await Promise.all([...this.beforeLoadLazyCallbacks.map((cb) => cb()), beforeLoadLazyTask]);\n  }\n\n  private async loadLazyPromise(): Promise<void> {\n    // eslint-disable-next-line no-async-promise-executor, @typescript-eslint/no-misused-promises\n    const loadLazyTask: Promise<void> = new Promise(async (resolve) => {\n      try {\n        const {\n          lazyStylesScssPath,\n          sidekickLibraryStylesScssPath,\n          fontsScssPath,\n          lazyStylesCssPath,\n          sidekickLibraryStylesCssPath,\n        } = config;\n\n        await loadBlocks();\n\n        const { hash } = window.location;\n        const element = hash ? document.getElementById(hash.substring(1)) : false;\n        if (hash && element) element.scrollIntoView();\n\n        if (lazyStylesScssPath && lazyStylesCssPath) await loadCSS(lazyStylesCssPath);\n        if (sidekickLibraryStylesScssPath && sidekickLibraryStylesCssPath && isSidekickLibraryActive()) {\n          await loadCSS(sidekickLibraryStylesCssPath);\n        }\n        if (fontsScssPath) await loadFonts();\n        sampleRUM('lazy');\n        const main = document.querySelector('main') as HTMLElement;\n        // @ts-ignore\n        sampleRUM.observe(main.querySelectorAll('div[data-block-name]'));\n        // @ts-ignore\n        sampleRUM.observe(main.querySelectorAll('picture > img'));\n      } catch (error) {\n        DebuggerService.error('LoadLazyTask: ', error);\n      }\n      resolve();\n    });\n\n    await Promise.all([...this.loadLazyCallbacks.map((cb) => cb()), loadLazyTask]);\n  }\n\n  private async beforeLoadDelayedPromise(): Promise<void> {\n    const beforeLoadDelayedTask: Promise<void> = new Promise((resolve) => resolve());\n\n    await Promise.all([...this.beforeLoadDelayedCallbacks.map((cb) => cb()), beforeLoadDelayedTask]);\n  }\n\n  private async loadDelayedPromise(): Promise<void> {\n    const loadDelayedTask: Promise<void> = new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, 3000);\n    });\n\n    await Promise.all([...this.loadDelayedCallbacks.map((cb) => cb()), loadDelayedTask]);\n  }\n\n  private async getInitializedPromise(): Promise<void> {\n    const initializedTask: Promise<void> = new Promise((resolve) => resolve());\n\n    await Promise.all([...this.initializedCallbacks.map((cb) => cb()), initializedTask]);\n  }\n}\n\nexport default new HLX();\n","import HLX from './index';\n\nconst READY_STATES = {\n  interactive: 'interactive',\n  complete: 'complete',\n};\n\nasync function init() {\n  HLX.addBeforeEagerTask(() => {\n    const main = document.getElementsByTagName('main')[0];\n    main.setAttribute('id', 'main');\n    return Promise.resolve();\n  });\n\n  await HLX.init();\n}\n\nexport function initHLXApp() {\n  if (document.readyState === READY_STATES.interactive || document.readyState === READY_STATES.complete) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    init();\n  } else {\n    document.addEventListener('readystatechange', () => {\n      const readyState = document.readyState;\n      if (readyState === READY_STATES.interactive || readyState === READY_STATES.complete) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        init();\n      }\n    });\n  }\n}\n","import './components/icon/icon';\nimport { initHLXApp } from './app/init';\n\ninitHLXApp();\n\ndeclare global {\n  interface Window {\n    hlx: {\n      RUM_MASK_URL: string;\n      codeBasePath: string;\n      lighthouse: boolean;\n    };\n  }\n}\n"],"names":["addClasses","element","classes","cssClass","toClassName","decorateTemplateAndTheme","template","getMetadata","theme","undefinedOnEmpty","value","setDocLanguage","lang","getLocation","isSidekickLibraryActive","config","loadFonts","fontsCssPath","loadCSS","error","DebuggerService","sampleRUM","checkpoint","data","defer","fnname","args","dfnname","fn","chkpnt","weight","id","_","i","a","random","isSelected","firstReadTime","urlSanitizers","knownProperties","sendPing","pdata","body","url","script","setupHlxObj","mainScriptPath","scriptEl","initSampleRUM","event","waitForLCP","firstSection","lcpCandidate","lcpBlocks","blocks","collectBlocks","blockPromises","block","loadBlockModules","loadBlockStyles","firstBlock","showSection","resolve","ev","HLX","cb","beforeLoadEagerTask","loadEagerTask","main","decorateButtons","transformSections","decorateBlocks","beforeLoadLazyTask","loadLazyTask","lazyStylesScssPath","sidekickLibraryStylesScssPath","fontsScssPath","lazyStylesCssPath","sidekickLibraryStylesCssPath","loadBlocks","hash","beforeLoadDelayedTask","loadDelayedTask","initializedTask","HLX$1","READY_STATES","init","initHLXApp","readyState"],"mappings":"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"}